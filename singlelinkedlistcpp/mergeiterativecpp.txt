/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>

using namespace std;
class node
{
    public:
    int data;
    node*next;
    
    
    node(int val)
    {
        data=val;
        next=NULL;
    }
};


void addattail(node*&head,int val)
{
    node*n=new node(val);
    if(head==NULL)
    {
        n->next=head;
        head=n;
        return;
        
    }
    node*temp=head;
    while(temp->next!=NULL)
    {
        temp=temp->next;
    }
    temp->next=n;
    return ;
    
}
void addathead(node*&head,int val)
{
    
    
    node*n=new node(val);
    n->next=head;
   
    head=n;
    return;
}
void display(node*head)
{
    node*temp=head;
    while(temp!=NULL)
    {
        
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"NULL";
    return ;
}


node*merge(node*&head,node*&head1)
{
    node*p1=head;
    node*p2=head1;
    node*dummynode=new node(-1);
    node*p3=dummynode;
    
    while(p1!=NULL &&p2!=NULL)
    {
        
        if(p1->data<p2->data)
        {
            p3->next=p1;
            p1=p1->next;
            
        }
        else
        {
            p3->next=p2;
            p2=p2->next;
            
        }
        
        p3=p3->next;
    }
    
    while(p1!=NULL)
    {
        p3->next=p1;
        p1=p1->next;
        p3=p3->next;
        
    }
    while(p2!=NULL)
    {
        p3->next=p2;
        p2=p2->next;
        p3=p3->next;
        
    }
    
    return dummynode->next;
}

int main()
{
    node*head=NULL;
    
    addattail(head,1);
    addattail(head,4);
    addattail(head,7);
    
    display(head);
    cout<<"\n";
    
    node*head1=NULL;
    
    
   
    addattail(head1,2);
    addattail(head1,3);
    addattail(head1,6);
    
    
    display(head1);
    cout<<"\n";
    node*result=NULL;
    
    node*newhead=merge(head,head1);
    display(newhead);
    
    
    
    
    
   
}